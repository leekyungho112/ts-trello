{"version":3,"sources":["store/localStorage.ts","atoms.ts","components/AddBoard.tsx","components/DragabbleCard.tsx","components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["loadedTodos","localState","localStorage","getItem","JSON","parse","saveTodos","todo","setItem","stringify","toDoState","atom","key","default","Doing","Done","AddForm","styled","form","Title","h1","AddBoard","useRecoilState","toDos","setToDos","useForm","register","setValue","handleSubmit","useEffect","onSubmit","category","allBoard","required","type","placeholder","Card","div","props","isDragging","theme","cardColor","DragabbleCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","Wrapper","boardColor","h2","bgColor","DeleteBoardButton","button","Area","isDraggingOver","isDraggingFromThisWith","Form","Board","boardId","toDoStates","onClick","allBoards","boards","toDo","newToDo","id","Date","now","text","droppableId","Boolean","draggingFromThisWith","droppableProps","map","Container","Header","AddBoardContainer","Boards","DeleteArea","App","onDragEnd","info","destination","source","sourceBoard","splice","boardCopy","taskObj","destinationBoard","Object","keys","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEaA,EAAc,WACzB,IAAMC,EAAaC,aAAaC,QAAQ,SACxC,GAAmB,OAAfF,EACF,OAAOG,KAAKC,MAAMJ,IAITK,EAAY,SAACC,GACxBL,aAAaM,QAAQ,QAASJ,KAAKK,UAAUF,KCElCG,EAAYC,YAAiB,CACxCC,IAAK,OACLC,QAASb,IACLA,IACA,CACE,QAAS,GACTc,MAAO,GACPC,KAAM,M,eCZRC,EAAUC,IAAOC,KAAV,oQAcPC,EAAQF,IAAOG,GAAV,4FA0CIC,EAhCE,WACf,MAA0BC,YAAeZ,GAAzC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAA6CC,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,aAkB5B,OAJAC,qBAAU,WACRvB,EAAUiB,KACT,CAACA,IAGF,eAACP,EAAD,CAASc,SAAUF,GAlBL,SAAC,GAA6B,IAA3BG,EAA0B,EAA1BA,SACA,KAAbA,IAGJP,GAAS,SAACQ,GACR,OAAO,2BACJD,EAAW,IACTC,MAGPL,EAAS,WAAY,QAQrB,UACE,cAACR,EAAD,uCACA,iDACMO,EAAS,WAAY,CAAEO,UAAU,KADvC,IAEEC,KAAK,OACLC,YAAY,wBCrDdC,EAAOnB,IAAOoB,IAAV,6LACY,SAACC,GAAD,OAClBA,EAAMC,WAAa,UAAYD,EAAME,MAAMC,aAK/B,SAACH,GAAD,OACZA,EAAMC,WAAa,mCAAqC,UAYtDG,EAAgB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MACzC,OACE,cAAC,IAAD,CAAWC,YAAaH,EAAS,GAAIE,MAAOA,EAA5C,SACG,SAACE,EAAOC,GAAR,OACC,cAACZ,EAAD,qCACEG,WAAYS,EAAST,WACrBU,IAAKF,EAAMG,UACPH,EAAMI,gBACNJ,EAAMK,iBAJZ,aAME,+BAAOR,WAOFS,MAAMC,KAAKZ,GChCpBa,EAAUtC,IAAOoB,IAAV,8MAES,SAACC,GAAD,OAAWA,EAAME,MAAMgB,cAQvCrC,EAAQF,IAAOwC,GAAV,gHACA,SAACnB,GAAD,OAAWA,EAAME,MAAMkB,WAM5BC,EAAoB1C,IAAO2C,OAAV,uSAqBjBC,EAAO5C,IAAOoB,IAAV,8HACY,SAACC,GAAD,OAClBA,EAAMwB,eACF,UACAxB,EAAMyB,uBACN,UACA,aAYFC,EAAO/C,IAAOC,KAAV,uGAuEK+C,EA/DD,SAAC,GAAqC,IAAnC1C,EAAkC,EAAlCA,MAAO2C,EAA2B,EAA3BA,QACtB,EAA+B5C,YAAeZ,GAA9C,mBAAOyD,EAAP,KAAmB3C,EAAnB,KACA,EAA6CC,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,aAyB5B,OAHAC,qBAAU,WACRvB,EAAU6D,KACT,CAACA,IAEF,eAACZ,EAAD,WACE,cAAC,EAAD,UAAQW,IACR,cAACP,EAAD,CAAmBS,QAdG,WACxB5C,GAAS,SAAC6C,GACR,IAAMC,EAAM,eAAQD,GAEpB,cADOC,EAAOJ,GACP,eAAKI,OAUZ,oBACA,cAACN,EAAD,CAAMlC,SAAUF,GA5BJ,SAAC,GAAqB,IAAnB2C,EAAkB,EAAlBA,KACXC,EAAU,CACdC,GAAIC,KAAKC,MACTC,KAAML,GAER/C,GAAS,SAAC6C,GACR,OAAO,2BACFA,GADL,kBAEGH,EAFH,CAEcM,GAFd,mBAE0BH,EAAUH,UAGtCvC,EAAS,OAAQ,OAiBf,SACE,iDACMD,EAAS,OAAQ,CAAEO,UAAU,KADnC,IAEEC,KAAK,OACLC,YAAW,mBAAc+B,QAI7B,cAAC,IAAD,CAAWW,YAAaX,EAAxB,SACG,SAACnB,EAAOC,GAAR,OACC,eAACa,EAAD,yBACEC,eAAgBd,EAASc,eACzBC,uBAAwBe,QAAQ9B,EAAS+B,sBACzC9B,IAAKF,EAAMG,UACPH,EAAMiC,gBAJZ,qBAMGzD,QANH,IAMGA,OANH,EAMGA,EAAO0D,KAAI,SAACV,EAAM1B,GAAP,OACV,cAAC,EAAD,CAEEA,MAAOA,EACPF,OAAQ4B,EAAKE,GACb7B,SAAU2B,EAAKK,MAHVL,EAAKE,OAMb1B,EAAMZ,uBCxHb+C,EAAYjE,IAAOoB,IAAV,mHAMT8C,EAASlE,IAAOoB,IAAV,+GAMN+C,EAAoBnE,IAAOoB,IAAV,iHAGD,SAACC,GAAD,OAAWA,EAAME,MAAMgB,cAIvCD,EAAUtC,IAAOoB,IAAV,wIAOPgD,EAASpE,IAAOoB,IAAV,mKAQNiD,EAAarE,IAAOoB,IAAV,2NAIM,SAACC,GAAD,OAAYA,EAAMwB,eAAiB,UAAY,SAuFtDyB,I,EAAAA,EA5Ef,WACE,MAA0BjE,YAAeZ,GAAzC,mBAAOa,EAAP,KAAcC,EAAd,KAyCA,OACE,eAAC0D,EAAD,WACE,cAACC,EAAD,UACE,cAACC,EAAD,UACE,cAAC,EAAD,QAGJ,eAAC,IAAD,CAAiBI,UA9CH,SAACC,GACjB,IAAQC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,OAEhBD,IAC4B,YAAlB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAab,aAEfrD,GAAS,SAACQ,GACR,IAAM4D,EAAW,YAAO5D,EAAS2D,EAAOd,cAExC,OADAe,EAAYC,OAAOF,EAAO9C,MAAO,GAC1B,2BAAKb,GAAZ,kBAAuB2D,EAAOd,YAAce,QAG/B,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAab,gBAAb,OAA6Bc,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQd,aAEvCrD,GAAS,SAAC6C,GACR,IAAMyB,EAAS,YAAOzB,EAAUsB,EAAOd,cACjCkB,EAAUD,EAAUH,EAAO9C,OAGjC,OAFAiD,EAAUD,OAAOF,EAAO9C,MAAO,GAC/BiD,EAAUD,OAAV,OAAiBH,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAa7C,MAAO,EAAGkD,GACjC,2BAAK1B,GAAZ,kBAAwBsB,EAAOd,YAAciB,QAE3B,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAab,gBAAb,OAA6Bc,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQd,cAE9CrD,GAAS,SAACQ,GAAc,IAAD,EACf4D,EAAW,YAAO5D,EAAS2D,EAAOd,cAClCkB,EAAUH,EAAYD,EAAO9C,OAC7BmD,EAAgB,YAAOhE,EAAS0D,EAAYb,cAGlD,OAFAe,EAAYC,OAAOF,EAAO9C,MAAO,GACjCmD,EAAiBH,OAAjB,OAAwBH,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAa7C,MAAO,EAAGkD,GACxC,2BACF/D,GADL,uBAEG2D,EAAOd,YAAce,GAFxB,cAGGF,EAAYb,YAAcmB,GAH7B,SAiBJ,UACE,cAAC,EAAD,UACE,cAACX,EAAD,UACGY,OAAOC,KAAK3E,GAAO0D,KAAI,SAACf,GAAD,OACtB,cAAC,EAAD,CAAOA,QAASA,EAAuB3C,MAAOA,EAAM2C,IAAtBA,UAIpC,cAAC,IAAD,CAAWW,YAAY,SAAvB,SACG,SAAC9B,EAAOC,GAAR,OACC,qCACE,cAACsC,EAAD,yBACExB,eAAgBd,EAASc,eACzBb,IAAKF,EAAMG,UACPH,EAAMiC,gBAHZ,yBAOCjC,EAAMZ,yBCrHfgE,GAAcC,YAAH,47CAsDI,SAAC9D,GAAD,OAAWA,EAAME,MAAMkB,WAClC,SAACpB,GAAD,OAAWA,EAAME,MAAMgB,cAWjC6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAe/D,MC1EkB,CACrCkB,QAAS,UACTjB,UAAW,UACXe,WAAY,WDuER,UACE,cAAC2C,GAAD,IACA,cAAC,EAAD,WAINK,SAASC,eAAe,W","file":"static/js/main.19144406.chunk.js","sourcesContent":["import { IToDoState } from '../atoms';\n\nexport const loadedTodos = () => {\n  const localState = localStorage.getItem('state');\n  if (localState !== null) {\n    return JSON.parse(localState);\n  }\n};\n\nexport const saveTodos = (todo: IToDoState) => {\n  localStorage.setItem('state', JSON.stringify(todo));\n};\n","import { atom } from 'recoil';\nimport { loadedTodos } from './store/localStorage';\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\nexport interface IToDoState {\n  [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: 'toDo',\n  default: loadedTodos()\n    ? loadedTodos()\n    : {\n        'To Do': [],\n        Doing: [],\n        Done: [],\n      },\n});\n","import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { toDoState } from '../atoms';\nimport { saveTodos } from '../store/localStorage';\n\nconst AddForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  input {\n    width: 90%;\n    border: none;\n    padding: 10px 5px;\n    border-radius: 10px;\n  }\n`;\nconst Title = styled.h1`\n  color: #3c40c6;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ninterface IAddBoard {\n  category: string;\n}\n\nconst AddBoard = () => {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IAddBoard>();\n  const onVaild = ({ category }: IAddBoard) => {\n    if (category === '') {\n      return;\n    }\n    setToDos((allBoard) => {\n      return {\n        [category]: [],\n        ...allBoard,\n      };\n    });\n    setValue('category', '');\n  };\n\n  useEffect(() => {\n    saveTodos(toDos);\n  }, [toDos]);\n\n  return (\n    <AddForm onSubmit={handleSubmit(onVaild)}>\n      <Title>Your Create Board Start!</Title>\n      <input\n        {...register('category', { required: true })}\n        type=\"text\"\n        placeholder=\"Add Task Board\"\n      />\n    </AddForm>\n  );\n};\n\nexport default AddBoard;\n","import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  background-color: ${(props) =>\n    props.isDragging ? '#0a3d62' : props.theme.cardColor};\n  border-radius: 5px;\n  padding: 10px 10px;\n  margin-bottom: 10px;\n\n  box-shadow: ${(props) =>\n    props.isDragging ? '0 2px 10px rgba(255,255,255,0.4)' : 'none'};\n  span {\n    word-wrap: break-word;\n  }\n`;\n\ninterface IDragabbleCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nconst DragabbleCard = ({ toDoId, toDoText, index }: IDragabbleCardProps) => {\n  return (\n    <Draggable draggableId={toDoId + ''} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.draggableProps}\n          {...magic.dragHandleProps}\n        >\n          <span>{toDoText}</span>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nexport default React.memo(DragabbleCard);\n","import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport DragabbleCard from './DragabbleCard';\nimport { ITodo, toDoState } from '../atoms';\nimport { useRecoilState } from 'recoil';\nimport { saveTodos } from '../store/localStorage';\n\nconst Wrapper = styled.div`\n  padding-top: 10px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst Title = styled.h2`\n  color: ${(props) => props.theme.bgColor};\n  text-align: center;\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\n\nconst DeleteBoardButton = styled.button`\n  border: none;\n  padding: 5px 10px;\n  position: absolute;\n  top: 5px;\n  right: 10px;\n  border-radius: 5px;\n  background-color: #ee5253;\n  color: #576574;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: black;\n    color: white;\n  }\n`;\n\ninterface IAreaProps {\n  isDraggingFromThisWith: boolean;\n  isDraggingOver: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? '#84817a'\n      : props.isDraggingFromThisWith\n      ? '#cc8e35'\n      : '#218c74'};\n  transition: all 0.2s ease-in-out;\n  flex-grow: 1;\n  padding: 20px;\n`;\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n}\ninterface IForm {\n  toDo: string;\n}\nconst Form = styled.form`\n  width: 100%;\n  input {\n    width: 100%;\n    padding: 10px 10px;\n  }\n`;\n\nconst Board = ({ toDos, boardId }: IBoardProps) => {\n  const [toDoStates, setToDos] = useRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onVaild = ({ toDo }: IForm) => {\n    const newToDo = {\n      id: Date.now(),\n      text: toDo,\n    };\n    setToDos((allBoards) => {\n      return {\n        ...allBoards,\n        [boardId]: [newToDo, ...allBoards[boardId]],\n      };\n    });\n    setValue('toDo', '');\n  };\n  const handleDeleteBoard = () => {\n    setToDos((allBoards) => {\n      const boards = { ...allBoards };\n      delete boards[boardId];\n      return { ...boards };\n    });\n  };\n\n  useEffect(() => {\n    saveTodos(toDoStates);\n  }, [toDoStates]);\n  return (\n    <Wrapper>\n      <Title>{boardId}</Title>\n      <DeleteBoardButton onClick={handleDeleteBoard}>DELETE</DeleteBoardButton>\n      <Form onSubmit={handleSubmit(onVaild)}>\n        <input\n          {...register('toDo', { required: true })}\n          type=\"text\"\n          placeholder={`Add Task ${boardId}`}\n        />\n      </Form>\n\n      <Droppable droppableId={boardId}>\n        {(magic, snapshot) => (\n          <Area\n            isDraggingOver={snapshot.isDraggingOver}\n            isDraggingFromThisWith={Boolean(snapshot.draggingFromThisWith)}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            {toDos?.map((toDo, index) => (\n              <DragabbleCard\n                key={toDo.id}\n                index={index}\n                toDoId={toDo.id}\n                toDoText={toDo.text}\n              />\n            ))}\n            {magic.placeholder}\n          </Area>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { toDoState } from './atoms';\nimport AddBoard from './components/AddBoard';\nimport Board from './components/Board';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n`;\nconst Header = styled.div`\n  width: 100%;\n  margin: 50px 0px;\n  display: flex;\n  justify-content: center;\n`;\nconst AddBoardContainer = styled.div`\n  width: 200px;\n  height: 100px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 20px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  max-width: 1000px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\nconst Boards = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 10px;\n  margin: 100px 0px;\n`;\n\nconst DeleteArea = styled.div<IAreaProps>`\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  background-color: ${(props) => (props.isDraggingOver ? '#84817a' : 'red')};\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  bottom: 10px;\n`;\n\ninterface IAreaProps {\n  isDraggingOver: boolean;\n}\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info;\n\n    if (!destination) return;\n    if (destination?.droppableId === 'Delete') {\n      // 휴지통으로 리스트를 움직일 경우\n      setToDos((allBoard) => {\n        const sourceBoard = [...allBoard[source.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        return { ...allBoard, [source.droppableId]: sourceBoard };\n      });\n    } else {\n      if (destination?.droppableId === source?.droppableId) {\n        // 같은 board안에서 리스트를 움직일 경우\n        setToDos((allBoards) => {\n          const boardCopy = [...allBoards[source.droppableId]];\n          const taskObj = boardCopy[source.index];\n          boardCopy.splice(source.index, 1);\n          boardCopy.splice(destination?.index, 0, taskObj);\n          return { ...allBoards, [source.droppableId]: boardCopy };\n        });\n      } else if (destination?.droppableId !== source?.droppableId) {\n        // 다른 board로 리스트를 움직일 경우\n        setToDos((allBoard) => {\n          const sourceBoard = [...allBoard[source.droppableId]];\n          const taskObj = sourceBoard[source.index];\n          const destinationBoard = [...allBoard[destination.droppableId]];\n          sourceBoard.splice(source.index, 1);\n          destinationBoard.splice(destination?.index, 0, taskObj);\n          return {\n            ...allBoard,\n            [source.droppableId]: sourceBoard,\n            [destination.droppableId]: destinationBoard,\n          };\n        });\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Header>\n        <AddBoardContainer>\n          <AddBoard />\n        </AddBoardContainer>\n      </Header>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Wrapper>\n          <Boards>\n            {Object.keys(toDos).map((boardId) => (\n              <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n            ))}\n          </Boards>\n        </Wrapper>\n        <Droppable droppableId=\"Delete\">\n          {(magic, snapshot) => (\n            <>\n              <DeleteArea\n                isDraggingOver={snapshot.isDraggingOver}\n                ref={magic.innerRef}\n                {...magic.droppableProps}\n              >\n                Delete\n              </DeleteArea>\n              {magic.placeholder}\n            </>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { darkTheme } from './theme';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@300;400;500;700&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Oswald', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.boardColor};\n  \n}\na {\n  text-decoration:none;\n  color: inherit;\n}\n\n\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#192a56',\n  cardColor: '#f5f6fa',\n  boardColor: '#fbc531',\n};\n"],"sourceRoot":""}